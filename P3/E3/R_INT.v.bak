module R_INT
#(parameter Win=16)
  (input signed [Win-1:0] data_in,
  input clk,
  input rst,
  input val_in,  					// Validation input
  output val_out,					// Validation output
  output reg signed [Win-1:0] data_out);
  
  /*
  initial begin
    if(rst) begin
      data_out = {(Win-1){1'b0}};
    end
    else begin
      if(val_in == 1'b1) begin
        data_out = data_in;
        repeat (1) @(posedge clk);
        data_out = {(Win-1){1'b0}};
        repeat (1999) @(posedge clk);
      end
    end
  end

  assign val_out = val_in;*/
  parameter PER = 10;

  always @(posedge clk) 
  begin
    if(rst) begin
      data_out <= {(Win){1'b0}};
      //val_out <= 0;
    end
    else begin
      if(val_in == 1'b1) begin
        data_out <= data_in;
        val_out <= 1;
      end
      else begin
        data_out <= {(Win){1'b0}};
      end
    end
  end

  //assign val_out = (val_in)? 1'b1 : 1'b0;
  //assign val_out = 1'b0;

  /*
  assign data_out = (!rst)? data_in : {(Win-1){1'b0}};
  assign data_out = (val_in)? data_in : {(Win-1){1'b0}};
  repeat (1) @(posedge clk);
  assign data_out = {(Win-1){1'b0}};
  repeat (1999) @(posedge clk);

  assign val_out = val_in;
  */
  
  //assign data_out = (val_in)? data_in : {(Win-1){1'b0}};

endmodule
			

   